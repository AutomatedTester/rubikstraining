{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Combinations","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","e","opt","optsLength","target","options","length","opts","i","selected","push","setState","react_default","a","createElement","Card","Title","Body","generateScramble","React","Component","TrainingScramble","Training","_this2","onChange","label","App_TrainingScramble","App","className","rel","href","integrity","crossorigin","react_router_dom","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00a1bdeb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport generateScramble from 'scramble-generator';\nimport {Card, Nav, Navbar} from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n      rel = \"stylesheet\"\n      href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n      integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n      crossorigin = \"anonymous\" />\n      <Router>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Cube Training</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/rubikstraining/\">Home</Nav.Link>\n            <Nav.Link href=\"/rubikstraining/training\">Training</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Route exact path=\"/rubikstraining/\" component={Combinations} />\n      <Route exact path=\"/rubikstraining/training\" component={Training} />\n      </Router>\n    </div>\n  );\n}\n\nclass Combinations extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    let optsLength = e.target.options.length;\n    let opts = [], opt;\n    for (let i = 0; i < optsLength; i++) {\n      opt = e.target.options[i];\n      if (opt.selected) {\n        opts.push(opt.value);\n      }\n    }\n\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  render() {\n    return  (<Card>\n              <Card.Title>Scramble</Card.Title>\n              <Card.Body>{generateScramble()}</Card.Body>\n            </Card>\n    );\n  }\n}\nclass TrainingScramble extends React.Component {\n\n  render() {\n    return \"scramble\"\n  }\n}\nclass Training extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    let optsLength = e.target.options.length;\n    let opts = [],\n      opt;\n    for (let i = 0; i < optsLength; i++) {\n      opt = e.target.options[i];\n      if (opt.selected) {\n        opts.push(opt.value);\n      }\n    }\n\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  render() {\n    let setup = {\n      \"olldot\": \"F R U R' U' F' f R U R' U' f'\",\n      \"olll\": \"f R U R' U' f'\",\n      \"ollline\": \"F R U R' U' F'\",\n      \"plldiagcorner\": \"F R U' R' U' R U R' F' R U R' U' R' F R F'\",\n      \"plladjacentcorner\": \"R U R' U' R' F R2 U' R' U' R U R' F'\"\n    };\n    return (\n      <div>\n        <select onChange = {this.handleChange}>\n        <optgroup label=\"OLL\">\n          <option value = \"olldot\"> dot </option>\n          <option value = \"olll\"> L </option>\n          <option value = \"ollline\"> line </option>\n        </optgroup>\n        <optgroup label=\"PLL\">\n          <option value=\"plldiagcorner\">Diagonal Corner Swap</option>\n          < option value = \"plladjacentcorner\">Diagonal Corner Swap</option>\n        </optgroup>\n        </select> <div> <TrainingScramble>Scramble</TrainingScramble> </div> </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}